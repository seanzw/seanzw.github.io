<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zhengrong Wang</title>
    <link>https://seanzw.github.io/</link>
    <description>Recent content on Zhengrong Wang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 20 Dec 2020 20:16:06 -0800</lastBuildDate><atom:link href="https://seanzw.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bring AVX Support to Gem5</title>
      <link>https://seanzw.github.io/posts/gem5-avx/</link>
      <pubDate>Sun, 20 Dec 2020 20:16:06 -0800</pubDate>
      
      <guid>https://seanzw.github.io/posts/gem5-avx/</guid>
      <description>TL;DR gem5-avx brings partial AVX2 and AVX-512 support to gem5. Feel free to use it for your research at your own risk. There is a short guide on how to add new instructions at the end of this post. Issues and pull requests are welcome!
Motivation During my research this year, I had to implement AVX2 and AVX-512 in gem5, as I could not find a good online. Eventually I had a partial implementation which works for the workloads I looked into.</description>
    </item>
    
    <item>
      <title>GEM5 O3 CPU Backend</title>
      <link>https://seanzw.github.io/posts/gem5-o3-backend/</link>
      <pubDate>Fri, 03 Jul 2020 12:14:04 -0700</pubDate>
      
      <guid>https://seanzw.github.io/posts/gem5-o3-backend/</guid>
      <description>This is my note on reading GEM5&amp;rsquo;s O3 cpu backend. I could not find a good document online, and the code is a little bit entangled and tricky to understand. So here I would extract the key function chain to show how an instruction is handled by the backend.
Hopefully this could help more people. I assume you are already familiar with GEM5.
Compute Instructions Compute instructions are simpler as they do not access memory and not interact with the LSQ.</description>
    </item>
    
    <item>
      <title>Simulating SPEC2017 on GEM5</title>
      <link>https://seanzw.github.io/posts/gem5-spec2017/</link>
      <pubDate>Wed, 11 Mar 2020 14:19:34 -0700</pubDate>
      
      <guid>https://seanzw.github.io/posts/gem5-spec2017/</guid>
      <description>Brief Note on Simulating SPEC2017 on GEM5 This is a brief note on how to simulate SPEC2017 on gem5. SPEC2017 has complicated compile scripts. The basic workflow is to compile it, do a fake run to get the arguments for the binary, and finally simulate it in gem5. This is by no means the official instructions or guaranteed to work on your machine. You can also follow the instructions on the official website of SPEC2017.</description>
    </item>
    
    <item>
      <title>Swap Ctrl and Cap</title>
      <link>https://seanzw.github.io/posts/swap-ctrl-cap/</link>
      <pubDate>Fri, 13 Sep 2019 10:30:04 -0700</pubDate>
      
      <guid>https://seanzw.github.io/posts/swap-ctrl-cap/</guid>
      <description>I find it very convenient to swap the control and cap lock key. And here is how I achieve this in the OS I am using.
Ubuntu 16.04 Somehow the gnome-tweak-tool is not working in my case. I am using the following command line and it works like magic.
/usr/bin/setxkbmap -option &amp;#34;ctrl:swapcaps&amp;#34; </description>
    </item>
    
    <item>
      <title>Extend RISC-V ISA with Matrix Multiply</title>
      <link>https://seanzw.github.io/posts/risc-v-isa-extension/</link>
      <pubDate>Fri, 28 Jun 2019 14:55:52 -0700</pubDate>
      
      <guid>https://seanzw.github.io/posts/risc-v-isa-extension/</guid>
      <description>Many computer architecture students will eventually add some new (useless) instructions to a ISA, and there are many great tutorial on how to do this. This is yet another notes on my struggling to extend RISC-V with a new matrix multiply instruction. The overall goal is to add a new functional unit in a general purpose processor to do a 4x4 matrix multiply accumulate with single-precision floating-point.
The Manual has a very detailed explanation on what ISA encoding is reserved for such non-standard extension (see ch.</description>
    </item>
    
    <item>
      <title>Setup This Website with Hugo</title>
      <link>https://seanzw.github.io/posts/setting-up-this/</link>
      <pubDate>Fri, 29 Mar 2019 15:41:55 -0700</pubDate>
      
      <guid>https://seanzw.github.io/posts/setting-up-this/</guid>
      <description>After 2 years with my previous dummy personal website, I was urged to create a better one. After some googling, I made this tiny website using Hugo. Here are some notes for a n00b in front-end like me.
 Make sure you download the extended version of Hugo. Otherwise you won&amp;rsquo;t have support for SASS and SCSS (I have no idea what these are). Just scroll down in the release page and you will find it.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://seanzw.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://seanzw.github.io/about/</guid>
      <description>About Me I am a fourth year Ph.D. student at UCLA, advised by Prof. Tony Nowatzki. I am generally interested in developing high performance computer architecture for both general and domain specific computing with compiler support. I am also looking into how to accurately and efficiently model and simulate current architectures.
Prior joining UCLA, I received Bachelor of Engineering from Department of Electronic Enginerring, Tsinghua University. I also studied at ETH ZÃ¼rich for half a year as a exhange student.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://seanzw.github.io/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://seanzw.github.io/projects/</guid>
      <description>Projects Yart-Yet Another Ray Tracer  Yart is a simple but powerful ray tracer engine. It reads in a scene description file and parses it. Then it renders the scene and prints the output image. For objects, it supports sphere and triangle mesh. For material, Lambertian, Specular, Refraction and Cook-Torrance BSDF are implemented. To solve the light equation, it can use either direct lighting or bidirectional path tracing. To accelerate the computation, multiple threads and OC-Tree are used.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://seanzw.github.io/publications/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://seanzw.github.io/publications/</guid>
      <description>Publications Zhengrong Wang, Jian Weng, Jason Lowe-Power, Jayesh Gaur, Tony Nowatzki
Stream Floating: Enabling Proactive and Decentralized Cache Optimizations
Best Paper Runner-Up [pdf] [slides] [pptx] [video]
2021 International Symposium on High-Performance Computer Architecture (HPCA).
Zhengrong Wang, Tony Nowatzki
Stream-based Memory Access Specialization for General Purpose Processors [pdf] [slides] [pptx]
2019 ACM/IEEE 46th Annual International Symposium on Computer Architecture (ISCA).
Jian Weng*, Sihao Liu*, Vidushi Dadu, Zhengrong Wang, Preyas Shah, Tony Nowatzki</description>
    </item>
    
  </channel>
</rss>
